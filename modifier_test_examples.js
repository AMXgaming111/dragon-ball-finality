// Examples of the new modifier system implementation

console.log('üéØ New Modifier System Examples\n');

console.log('üìã BASIC USAGE:');
console.log('‚Ä¢ !attack @user                    - Basic attack');
console.log('‚Ä¢ !attack e4 @user                 - High effort attack');
console.log('‚Ä¢ !attack a+10 @user               - +10 agility (ki cost)');
console.log('‚Ä¢ !attack a*2 @user                - 2x accuracy (ki cost)');

console.log('\nüÜì NO-COST MODIFIERS:');
console.log('Main Stat Modifiers (m):');
console.log('‚Ä¢ !attack m+15 @user               - +15 to strength (physical) or control (ki)');
console.log('‚Ä¢ !attack m-5 @user                - -5 to main stat');
console.log('‚Ä¢ !attack m*1.5 @user              - 1.5x final damage roll');
console.log('‚Ä¢ !attack m/2 @user                - Divide final damage by 2');

console.log('\nAccuracy-Only Modifiers (ma):');
console.log('‚Ä¢ !attack ma+20 @user              - +20 agility for accuracy only');
console.log('‚Ä¢ !attack ma-10 @user              - -10 agility for accuracy only');
console.log('‚Ä¢ !attack ma*3 @user               - 3x accuracy roll');
console.log('‚Ä¢ !attack ma/1.5 @user             - Divide accuracy by 1.5');

console.log('\nüî• COMPLEX COMBINATIONS:');
console.log('‚Ä¢ !attack e4 a+10 ma*2 m+10 @user  - High effort + agility bonus + 2x accuracy + strength boost');
console.log('‚Ä¢ !attack e1 m-5 ma+15 @user       - Low effort + stat penalty + accuracy agility boost');
console.log('‚Ä¢ !attack m*2 ma/2 @user           - Double damage, half accuracy');

console.log('\nüõ°Ô∏è DEFEND EXAMPLES:');
console.log('‚Ä¢ !defend @attacker                - Basic defense');
console.log('‚Ä¢ !defend e3 m+20 @attacker        - Medium effort + defense boost');
console.log('‚Ä¢ !defend ma+10 m*1.5 @attacker    - Accuracy agility + roll multiplier');

console.log('\n‚ö° KEY FEATURES:');
console.log('‚Ä¢ m/ma modifiers cost NO ki');
console.log('‚Ä¢ m affects main stat (STR for physical, CON for ki, DEF for defend)');
console.log('‚Ä¢ ma only affects agility for accuracy calculations');
console.log('‚Ä¢ All existing modifiers (a+, a*, e) still work normally');
console.log('‚Ä¢ Can combine all modifier types in one command');

console.log('\nüéÆ IMPLEMENTATION STATUS:');
console.log('‚úÖ Attack command modifier parsing');
console.log('‚úÖ Physical attack integration');
console.log('‚úÖ Ki attack integration');
console.log('‚úÖ Defend command modifier parsing');
console.log('üîÑ Defense calculation integration (in progress)');
console.log('üîÑ Magic attack integration (in progress)');
console.log('üîÑ Technique system integration (in progress)');
